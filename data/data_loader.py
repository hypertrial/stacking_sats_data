"""
Data extraction and loading utilities for BTC price data.
"""

from __future__ import annotations

import logging
from io import StringIO
from pathlib import Path

import pandas as pd
import requests

# Logging configuration
# ---------------------------
logging.basicConfig(
    format="%(asctime)s %(levelname)-8s %(message)s",
    level=logging.INFO,
    datefmt="%Y-%m-%d %H:%M:%S",
)


def extract_btc_data_to_csv(local_path: str | Path | None = None) -> None:
    """
    Download CoinMetrics' BTC daily time‑series and store them locally.

    Parameters
    ----------
    local_path : str or Path, optional
        Destination CSV path. If None, defaults to "btc_data.csv" in the data folder.
    """
    if local_path is None:
        # Default to saving in the data folder
        data_dir = Path(__file__).parent
        local_path = data_dir / "btc_data.csv"
    else:
        local_path = Path(local_path)

    url = "https://raw.githubusercontent.com/coinmetrics/data/master/csv/btc.csv"
    logging.info("Downloading BTC data from %s", url)
    resp = requests.get(url, timeout=30)
    resp.raise_for_status()

    btc_df = pd.read_csv(StringIO(resp.text))
    btc_df["time"] = pd.to_datetime(btc_df["time"]).dt.normalize()
    btc_df["time"] = btc_df["time"].dt.tz_localize(None)
    btc_df.set_index("time", inplace=True)
    btc_df.to_csv(local_path)
    logging.info("Saved BTC data ➜ %s  (%d rows)", local_path, len(btc_df))


def load_data(path: str | Path | None = None) -> pd.DataFrame:
    """
    Load the BTC price CSV generated by :func:`extract_btc_data_to_csv`.
    If the file doesn't exist, it will be downloaded automatically.

    Parameters
    ----------
    path : str or Path, optional
        Path to the CSV file. If None, defaults to "btc_data.csv" in the data folder.
    """
    if path is None:
        # Default to looking in the data folder
        data_dir = Path(__file__).parent
        path = data_dir / "btc_data.csv"
    else:
        path = Path(path)

    if not path.exists():
        logging.info("BTC data file not found. Downloading automatically...")
        extract_btc_data_to_csv(path)

    df = pd.read_csv(path, index_col=0, parse_dates=True, low_memory=False)
    df = df.loc[~df.index.duplicated(keep="last")].sort_index()
    validate_price_data(df)
    return df


def validate_price_data(df: pd.DataFrame) -> None:
    """
    Basic sanity‑check on the input dataframe.
    """
    if df.empty or "PriceUSD" not in df.columns:
        raise ValueError("Invalid BTC price data – 'PriceUSD' column missing.")
    if not isinstance(df.index, pd.DatetimeIndex):
        raise ValueError("Index must be DatetimeIndex.")
